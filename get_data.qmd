---
title: "get_data"
author: "Olaf König"
format: 
  html:
    self-contained: TRUE
    page-layout: full
    toc: true
    toc-depth: 4
    number-sections: true
    number-depth: 4
    code-line-numbers: true
    code-fold: true
execute:
  warning: false
theme: cosmo 
editor: visual
---

# Libraries

```{r}

library(jsonlite)
library(purrr)
library(tidyverse)
library(tidylog)
library(httr)
library(stringr)

```

# Données votations

Les données par date de votations peuvent être trouvées sous:

<https://opendata.swiss/fr/dataset/echtzeitdaten-am-abstimmungstag-zu-eidgenoessischen-abstimmungsvorlagen>

## URL et chargement du JSON

```{r}

# Votation du 13 juin 2021
bfs_url <- "https://dam-api.bfs.admin.ch/hub/api/dam/assets/17484107/master"

# Votations du 9 juin 2024
# bfs_url <- "https://ogd-static.voteinfo-app.ch/v1/ogd/sd-t-17-02-20240609-eidgAbstimmung.json"

response <- GET(bfs_url)

data <- content(response, as = "parsed", type = "application/json")
```

## Fonction "get_data_votes" qui reprend les données communales, des districts et des cantons

```{r}

library(dplyr)

get_data_votes <- function(data) {
  
  # Extraire la date de la votation et la formater
  vote_date <- as.Date(data$abstimmtag, format="%Y%m%d")
  formatted_date <- format(vote_date, "%Y_%m_%d")
  
  # Fonction interne pour extraire les résultats des communes
  get_BFS_municipalities_results <- function(data) {
    bfs_results <- list()
    
    for (ballot in data$schweiz$vorlagen) {
      for (canton in ballot$kantone) {
        for (commune in canton$gemeinden) {
          ballot_name <- NULL
          for (title in ballot$vorlagenTitel) {
            if (title$langKey == "fr") {
              ballot_name <- title$text
              break
            }
          }
          commune_data <- c(
            id = commune$geoLevelnummer,
            name = commune$geoLevelname,
            canton_id = canton$geoLevelnummer,
            canton_name = canton$geoLevelname,
            ballot_id = ballot$vorlagenId,
            ballot_name = ballot_name,
            commune$resultat
          )
          bfs_results <- append(bfs_results, list(commune_data))
        }
      }
    }
    
    df_municipalities <- bind_rows(bfs_results)
    
    df_municipalities <- df_municipalities %>%
      rename(
        yes_pct = jaStimmenInProzent,
        yes = jaStimmenAbsolut,
        no = neinStimmenAbsolut,
        turnout = stimmbeteiligungInProzent,
        ballots_returned = eingelegteStimmzettel,
        voters = anzahlStimmberechtigte,
        valid_votes = gueltigeStimmen
      ) %>%
      select(-gebietAusgezaehlt)
    
    return(df_municipalities)
  }
  
  # Fonction interne pour extraire les résultats des cantons
  get_BFS_cantons_results <- function(data) {
    cantons <- list()
    
    for (ballot in data$schweiz$vorlagen) {
      for (canton in ballot$kantone) {
        ballot_name <- sapply(ballot$vorlagenTitel, function(title) {
          if (title$langKey == 'fr') return(title$text)
        })
        ballot_name <- unlist(ballot_name)
        
        cantons <- append(cantons, list(data.frame(
          id = canton$geoLevelnummer,
          name = canton$geoLevelname,
          canton_id = canton$geoLevelnummer,
          canton_name = canton$geoLevelname,
          ballot_id = ballot$vorlagenId,
          ballot_name = ballot_name,
          yes = canton$resultat$jaStimmenAbsolut,
          no = canton$resultat$neinStimmenAbsolut,
          yes_pct = canton$resultat$jaStimmenInProzent,
          turnout = canton$resultat$stimmbeteiligungInProzent,
          ballots_returned = canton$resultat$eingelegteStimmzettel,
          voters = canton$resultat$anzahlStimmberechtigte,
          valid_votes = canton$resultat$gueltigeStimmen
        )))
      }
    }
    
    df_cantons <- do.call(rbind, cantons)
    df_cantons <- as.data.frame(df_cantons)
    
    return(df_cantons)
  }
  
  # Fonction interne pour extraire les résultats des districts
  get_BFS_districts_results <- function(data) {
    districts <- list()
    
    for (ballot in data$schweiz$vorlagen) {
      for (canton in ballot$kantone) {
        for (district in canton$bezirke) {
          ballot_name <- sapply(ballot$vorlagenTitel, function(title) {
            if (title$langKey == 'fr') return(title$text)
          })
          ballot_name <- unlist(ballot_name)
          
          districts <- append(districts, list(data.frame(
            id = district$geoLevelnummer,
            name = district$geoLevelname,
            canton_id = canton$geoLevelnummer,
            canton_name = canton$geoLevelname,
            ballot_id = ballot$vorlagenId,
            ballot_name = ballot_name,
            yes = district$resultat$jaStimmenAbsolut,
            no = district$resultat$neinStimmenAbsolut,
            yes_pct = district$resultat$jaStimmenInProzent,
            turnout = district$resultat$stimmbeteiligungInProzent,
            ballots_returned = district$resultat$eingelegteStimmzettel,
            voters = district$resultat$anzahlStimmberechtigte,
            valid_votes = district$resultat$gueltigeStimmen
          )))
        }
      }
    }
    
    df_districts <- do.call(rbind, districts)
    df_districts <- as.data.frame(df_districts)
    
    return(df_districts)
  }
  
  # Obtenir les trois dataframes
  df_municipalities <- get_BFS_municipalities_results(data)
  df_cantons <- get_BFS_cantons_results(data)
  df_districts <- get_BFS_districts_results(data)
  
  # Exporter les dataframes en CSV
  write.csv(df_municipalities, paste0("data_input/df_votes_", formatted_date, "_municipalities.csv"), row.names = FALSE)
  write.csv(df_cantons, paste0("data_input/df_votes_", formatted_date, "_cantons.csv"), row.names = FALSE)
  write.csv(df_districts, paste0("data_input/df_votes_", formatted_date, "_districts.csv"), row.names = FALSE)
  
  # Retourner une liste avec les dataframes
  return(list(df_municipalities = df_municipalities, df_cantons = df_cantons, df_districts = df_districts))
}

```

## Appel de la fonction

```{r}

resultats_votes <- get_data_votes(data)

# Accéder aux dataframes individuellement
df_municipalities <- resultats_votes$df_municipalities
df_cantons <- resultats_votes$df_cantons
df_districts <- resultats_votes$df_districts
```

# Données division spatiales

## Fonction de requête Application des communes

```{r}

library(stringr)
library(readr)

get_geolevel <- function(date1) {
  # Construire l'URL et lire les données
  url <- str_c("https://sms.bfs.admin.ch/WcfBFSSpecificService.svc/AnonymousRest/communes/levels?startPeriod=", date1, "&endPeriod=", date1, "&useBfsCode=false&labelLanguages=fr&format=csv")
  result <- read_csv(url)
  
  # Exporter les données en CSV avec la date dans le nom de fichier
  write_csv(result, str_c("data_input/spatial_division_", str_replace_all(date1, "-", "_"), ".csv"))
  
  return(result)
}

# Utilisation de la fonction
spatial_index <- get_geolevel("2024-03-01")
```
